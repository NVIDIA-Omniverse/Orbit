# Copyright (c) 2022-2024, The ORBIT Project Developers.
# All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause

"""
This script checks whether the env origins generated by the TerrainImporter for flat
ground and Isaac SimGrid Cloner are the same.
"""

from __future__ import annotations

"""Launch Isaac Sim Simulator first."""

from omni.isaac.orbit.app import AppLauncher

# launch omniverse app
app_launcher = AppLauncher(headless=True)
simulation_app = app_launcher.app

"""Rest everything follows."""

import torch
import unittest

import omni.isaac.core.utils.prims as prim_utils
import omni.isaac.core.utils.stage as stage_utils
from omni.isaac.cloner import GridCloner

import omni.isaac.orbit.sim as sim_utils
from omni.isaac.orbit.terrains import TerrainImporter, TerrainImporterCfg


def get_grid_cloner_env_origins(num_envs: int = 1, env_spacing: float = 3.0):
    """Get env_origins generated by IsaacSim GridCloner (grid_cloner.py)."""
    cloner = GridCloner(spacing=env_spacing)
    cloner.define_base_env("/World/envs")
    envs_prim_paths = cloner.generate_paths("/World/envs/env", num_paths=num_envs)
    prim_utils.define_prim("/World/envs/env_0")
    isaac_sim_env_origins = torch.tensor(
        cloner.clone(source_prim_path="/World/envs/env_0", prim_paths=envs_prim_paths, replicate_physics=True),
        device="cuda:0",
        dtype=torch.float32,
    )

    return isaac_sim_env_origins


def get_terrain_importer_env_origins(num_envs: int = 1, env_spacing: float = 3.0):
    """Get env_origins generated by TerrainImporter (_compute_env_origins_grid())."""
    terrain_importer_cfg = TerrainImporterCfg(
        num_envs=num_envs,
        env_spacing=env_spacing,
        prim_path="/World/ground",
        terrain_type="plane",
        terrain_generator=None,
    )
    terrain_importer = TerrainImporter(terrain_importer_cfg)
    return terrain_importer.env_origins


class TestGridCloner(unittest.TestCase):
    """Test for grid cloning."""

    def setUp(self):
        """Create a blank new stage for each test."""
        # Create a new stage
        stage_utils.create_new_stage()
        # Load kit helper
        self.sim = sim_utils.SimulationContext(sim_utils.SimulationCfg(dt=0.005))

    def tearDown(self):
        """Stops simulator after each test."""
        # stop simulation
        self.sim.stop()
        # clear the stage
        self.sim.clear_instance()

    """
    Tests
    """

    def test_env_origins(self):
        """Test env origins generated by TerrainImporter & IsaacSim GridCloner to check consistency."""
        # fix env spacing for convenience
        env_spacing = 2.17
        # iterate over different number of environments
        for num_envs in [1, 4, 7, 12]:
            with self.subTest(num_envs=num_envs):
                with sim_utils.build_simulation_context(auto_add_lighting=True) as sim:
                    grid_cloner_origins = get_grid_cloner_env_origins(num_envs, env_spacing)
                    terrain_origins = get_terrain_importer_env_origins(num_envs, env_spacing)
                    self.assertTrue(torch.all(terrain_origins == grid_cloner_origins))

                    sim.reset()
                    for _ in range(5):
                        sim.step()


if __name__ == "__main__":
    # run main
    unittest.main(verbosity=2, exit=False)
    # close sim app
    simulation_app.close()
